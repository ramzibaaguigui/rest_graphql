
# scalar definition
scalar Date

# type definition
type Publisher {
    id: ID!
    name: String!
    address: String!
    phone: String!
}

type Book {
    id: ID!
    isbn: String!
    title: String!
    publisher: Publisher!
    authors: [Author!]!
    createdAt: Date
}

type Author {
    id: ID!
    name: String!
    books: [Book!]!
}


input BookInput {
    title: String!
    isbn: String!
    authorsIds: [ID!]!
    publisherId: ID!
}

input AuthorInput {
    name: String
}

input PublisherInput {
    name: String
    address: String
    phone: String
}


# Query definition
type Query {
    allAuthors: [Author!]!
    allBooks: [Book!]!
    allPublishers: [Publisher!]!

    recentBooks(count: Int!): [Book!]!
    queryBooks(query: String!): [Book!]!
    authors: [Author!]!
    publishers: [Publisher!]!
    book(id: ID!): Book
    author(id: ID!): Author
    publisher(id: ID!): Publisher

}

type Mutation {

    # add mutations
    addBook(input: BookInput!): Book!
    addAuthor(input: AuthorInput!): Author!
    addPublisher(input: PublisherInput!): Publisher!

    # update mutations
    updateBook(input: BookInput!): Book!
    updateAuthor(input: AuthorInput!): Author!
    updatePublisher(input: PublisherInput!): Publisher!

    # delete mutations
    deleteBook(input: BookInput!): Book
    deleteAuthor(input: AuthorInput!): Author
    deletePublisher(input: PublisherInput!): Publisher
}

# Schema definition
schema {
    query: Query
    mutation: Mutation  # Add mutation type to the schema
}
# the possible operations that can be performed

